{"version":3,"file":"static/js/604.88e5a979.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/CharSearch.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/skeleton/SkeletonLoad.js","components/charInfo/CharInfo.js","components/errorBaundary/ErrorBaundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.jpg'\r\nimport './errorMessage.scss'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <div className='error' >\r\n           <img style={{display: 'block', height: '260px'}} src={img} alt=\"error\" /> \r\n           <p className='error_p'>\r\n           You have lost this battle with the server. <br /> Looks like the database is broken...\r\n           </p>\r\n        </div>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './randomChar.scss';\r\nimport React, { useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelService'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst CharSearch = () => {\r\n    const [searchText, setSearchText] = useState('');\r\n    const [searchResult, setSearchResult] = useState('');\r\n\r\n    const {loading, error, getByNameCharacters, clearError} = useMarvelService();\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n      setSearchText(e.target.value);\r\n    };\r\n  \r\n    const handleSearch = () => {\r\n        getByNameCharacters(searchText)\r\n            .then(item => {setSearchResult(item.name)});\r\n    };\r\n    return (\r\n        <>\r\n             <p className=\"randomchar__title\">\r\n                Or you can find your <br />\r\n                favorite character     \r\n            </p>\r\n            <input \r\n                className='char__search-input' \r\n                style={{margin: '0 auto'}} \r\n                type=\"text\" \r\n                name='text' \r\n                value={searchText}\r\n                onChange={handleInputChange}    \r\n                />\r\n                <span>{searchResult}</span>\r\n            <Link to={`/${searchText}`} className=\"button button__search\" onClick={handleSearch}>\r\n                <div className=\"inner\">try it</div>\r\n            </Link>\r\n        </>\r\n       \r\n    )\r\n}\r\nexport default CharSearch;","import './randomChar.scss';\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService'\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport CharSearch  from './CharSearch';\n\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[])   \n        \n\n    \n    const onCharLoaded = (char) => {\n        setChar(char);        \n    }\n\n \n    const updateChar = () => {\n        try{\n            const block = document.querySelector('.randomchar__block')\n            setTimeout(() => {\n                try {\n                   block.style.transform = 'translateX(100%)';\n                   block.style.opacity = 0 \n                } catch(e) {}\n                setTimeout(() => {\n                    try {\n                        block.style.transform = 'translateX(0%)';\n                        block.style.opacity = 1\n                    } catch(e) {}\n                  \n                },600)\n            },200)\n        } catch (e) {}\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(clearError)  \n        \n                \n    }\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const content = !(error || !char) ? (\n          <View updateChar={updateChar} char={char} />\n      ) : null;\n\n    return (\n        <div className=\"randomchar\">\n                <div>\n                    {errorMessage}\n\n                    {content}  \n                </div>\n                                       \n            <div className=\"randomchar__static\">\n                <CharSearch />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char, updateChar}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    return (\n            <div className=\"randomchar__block\">\n                <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n                <div className=\"randomchar__info\">\n                    <p style={{maxHeight: '30px'}} className=\"randomchar__name\">{name.slice(0, 14)}</p>\n                    <p className=\"randomchar__descr\">\n                    {description.length < 5 ? 'Little information about this character. Try searching on google.' : description.length > 175 ? description.slice(0, 175) + '...' : description}\n                    </p>\n                    <div className=\"randomchar__btns\">\n                        <button className=\"button button__main\" onClick={updateChar}>\n                            <div className=\"inner\">Go random</div>\n                        </button>\n                        <a href={wiki} target=\"_blank\" rel=\"noopener noreferrer\" className=\"button button__secondary\">\n                        \n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n    )\n\n}\n\nexport default RandomChar;","import './charList.scss';\nimport { useState, useEffect, useRef } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\n\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [loadingNew, setLoadingNew] = useState(false);\n    const [offset, setOffset] = useState(Math.floor(Math.random(0, 1) * 350));\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const {loading, error, getAllCharacters, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        onRequest(offset, true);\n    },[]);\n\n\n    const onCharListLoaded = (newChar) => {   \n        let ended = false;\n        if(newChar.length < 9) {\n            ended = true\n        }\n        setCharList(charList => [...charList, ...newChar]);\n        setLoadingNew(loadingNew => false);\n        setOffset(offset => offset + Math.floor(Math.random(0, 1) * 250))\n        setCharEnded(charEnded => ended)\n    };\n\n\n    const onRequest = (offset, loadingNew) => {\n        loadingNew ? setLoadingNew(false) : setLoadingNew(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(clearError)\n    };\n\n\n    const itemRefs = useRef([]);\n\n\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    };\n\n\n\n    const renderCharList = () => {\n        const items = charList.map((item, i) => {\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                   <li\n                        ref={el => itemRefs.current[i] = el}\n                        tabIndex={0}\n                        className={`char__item`}\n                        onClick={() => {props.onCharSelected(item.id);  focusOnItem(i)}}\n                        key={item.id}\n                        onKeyDown={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} />\n                        <div className=\"char__name\">\n                            {item.name.length > 15 ? item.name.slice(0, 15) + '...' : item.name}\n                        </div>\n                    </li> \n                </CSSTransition>\n            );\n        \n        });\n\n        const errorMessage = error ? <div><ErrorMessage /></div> : null;\n        const spinner = loading && !setLoadingNew ?\n        \n\n            <div style={{position: 'relative', display:'block', left: '135%'}}>\n                <Spinner />\n            </div> : null;\n\n\n        return (\n            <ul style={{position: 'relative'}} className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {errorMessage}\n                    {spinner}\n                    {items}\n                </TransitionGroup>    \n            </ul>\n        );\n    }\n\n    return (\n        <div className=\"char__list\">\n            {renderCharList()}\n            <button disabled={loadingNew} style={{'display': charEnded ? 'none' : 'block'}} onClick={() => onRequest(offset)} className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    \n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './skeleton.scss';\r\n\r\nconst SkeletonLoad = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Collecting information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SkeletonLoad;","import { useState, useEffect } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\nimport SkeletonLoad from '../skeleton/SkeletonLoad'\nimport './charInfo.scss';\nimport useMarvelService from '../../services/MarvelService'\n\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    useEffect(() => {\n        const handleError = (error, info) => {\n          console.log(error, info);\n    }});\n    const updateChar = () => {\n        const {charId} = props\n        if (!charId) {\n            return\n        }\n        getCharacter(charId)\n        .then(onCharListLoaded)\n        .then(clearError)\n    }\n\n    const onCharListLoaded = (char) => {\n        setChar(char)\n    }\n\n    \n        const skeleton =  char || loading || error ? null : <Skeleton/>\n        const errorMessage = error ? <ErrorMessage /> : null;\n        const spinner = loading ? <SkeletonLoad/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null    \n\n        return (\n                <div className=\"char__info\">\n                    {skeleton}\n                    {errorMessage}\n                    {spinner}\n                    {content}    \n                </div>          \n        )\n    }\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    return (\n            <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={thumbnail}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} target=\"_blank\" rel=\"noopener noreferrer\" className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} target=\"_blank\" rel=\"noopener noreferrer\"className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description.length > 0 ? null : \"Well well well... In your multiverse, there is no information available about this hero. Try clicking the Wiki button to search in other multiverses.\"}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : \"Wow! It seems that in your universe, these comics don't exist yet. Well, wait a couple of years then. Or you can create it!\"}\n            \n                {comics.map((item, i) => {\n                    // eslint-disable-next-line\n                    if(i > 19){\n                        return null\n                    }\n                    return(\n                        <li key ={i} className=\"char__comics-item\">\n                            {i+1+\". \"} {item.name} \n                        </li>\n                    )\n                })}\n            </ul>\n            </>\n\n    )\n}\n\nexport default CharInfo;","import { useState, useEffect } from 'react';\r\n\r\nconst ErrorBaundary = (props) => {\r\n    const [error, setError] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const handleError = (error, info) => {\r\n            console.log(error, info);\r\n            setError(true)\r\n        }\r\n    }, []);\r\n    \r\n    if(error){\r\n        return <h2>HYDRA is currently attacking this page!</h2>\r\n    }\r\n    return props.children;\r\n}\r\n\r\nexport default ErrorBaundary;","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBaundary from '../errorBaundary/ErrorBaundary';\r\nimport decoration from '../../resources/img/vision.png';\r\nimport { useState } from \"react\";\r\nimport { Helmet } from 'react-helmet';\r\n\r\n\r\nconst MainPage = (props) => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n      setChar(id)\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel db\"\r\n                    />\r\n                <title>Marvel db</title>\r\n            </Helmet>\r\n            <ErrorBaundary>\r\n            <RandomChar />\r\n            </ErrorBaundary>\r\n                <div className=\"char__content\">\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                    <ErrorBaundary> {/* Оберните компонент CharInfo в ErrorBaundary */}\r\n                    <CharInfo charId={selectedChar} />\r\n                    </ErrorBaundary>\r\n                </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n\r\n}\r\nexport default MainPage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const {loading, request, error, clearError } = useHttp();\r\n\r\n\r\n    const keyApi = '7ff5c59122f6eb6dc8c5f443abf6a04f';\r\n    const apiBase = 'https://gateway.marvel.com:443/v1/public';\r\n    const limit = 'limit=9';\r\n    const baseOffset =  Math.floor(Math.random(0, 1) * 250);\r\n\r\n\r\n    const getByNameCharacters = async (name) => {\r\n        const res = await request(`${apiBase}/characters?name=${name}&apikey=${keyApi}`)\r\n        return _transformCharacter(res)\r\n    }\r\n\r\n\r\n    const getAllCharacters = async (offset = baseOffset) => {\r\n        const res = await request(`${apiBase}/characters?${limit}&offset=${offset}&apikey=${keyApi}`)\r\n        return res.data.results.map(_transformAllCharacter)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${apiBase}/characters/${id}?apikey=${keyApi}`)\r\n        return _transformCharacter(res)\r\n    }\r\n    const getComic = async (id) => {\r\n        const res = await request(`${apiBase}/comics/${id}?apikey=${keyApi}`)\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = baseOffset) => {\r\n        const res = await request(`${apiBase}/comics?limit=${8}&offset=${offset}&apikey=${keyApi}`)\r\n        return res.data.results.map(_transformgetAllComics)\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\t\treturn {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n\t};\r\n\r\n    const _transformgetAllComics = (res) => {\r\n        return {\r\n            id: res.id,\r\n            title: res.title,\r\n            description: res.description,\r\n            format: res.format,\r\n            issueNumber: res.issueNumber,\r\n            thumbnail: res.thumbnail.path + '.'+ res.thumbnail.extension,\r\n            homepage: res.urls[0].url,\r\n            wiki: ` https://www.google.com/search?q=site%3Amarvel.fandom.com+${res.title}`,\r\n            pricePrint: res.prices[0].price\r\n        }\r\n\r\n    }\r\n\r\n    const _transformCharacter = (res) => {\r\n        const currPath = res.data.results[0]\r\n        return {\r\n            name: currPath.name,\r\n            description: currPath.description,\r\n            thumbnail: currPath.thumbnail.path + '.'+ currPath.thumbnail.extension,\r\n            homepage: currPath.urls[0].url,\r\n            wiki: ` https://www.google.com/search?q=site%3Amarvel.fandom.com+${currPath.name}`,\r\n            comics: currPath.comics.items\r\n        }\r\n\r\n    }\r\n    const _transformAllCharacter = (res) => {\r\n        return {\r\n            id: res.id,\r\n            name: res.name,\r\n            description: res.description,\r\n            thumbnail: res.thumbnail.path + '.'+ res.thumbnail.extension,\r\n            homepage: res.urls[0].url,\r\n            wiki: ` https://www.google.com/search?q=site%3Amarvel.fandom.com+${res.name}`\r\n        }\r\n\r\n    }\r\n\treturn {\r\n\t\tloading,\r\n\t\terror,\r\n\t\tclearError,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n        getAllComics,\r\n        getComic,\r\n        getByNameCharacters\r\n\t};\r\n};\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["_jsxs","className","children","_jsx","style","display","height","src","img","alt","_useState","useState","_useState2","_slicedToArray","searchText","setSearchText","_useState3","_useState4","searchResult","setSearchResult","_useMarvelService","useMarvelService","getByNameCharacters","loading","error","clearError","_Fragment","margin","type","name","value","onChange","e","target","Link","to","concat","onClick","then","item","View","_ref","char","updateChar","description","thumbnail","wiki","homepage","maxHeight","slice","length","href","rel","setChar","getCharacter","useEffect","onCharLoaded","block","document","querySelector","setTimeout","transform","opacity","id","Math","floor","random","errorMessage","ErrorMessage","content","CharSearch","props","charList","setCharList","loadingNew","setLoadingNew","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","onCharListLoaded","newChar","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","classList","remove","add","focus","items","map","i","CSSTransition","timeout","classNames","ref","el","tabIndex","onCharSelected","onKeyDown","key","spinner","position","left","Spinner","TransitionGroup","component","renderCharList","disabled","comics","charId","skeleton","Skeleton","SkeletonLoad","selectedChar","Helmet","ErrorBaundary","RandomChar","CharList","CharInfo","decoration","_useHttp","setLoading","setError","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","undefined","fetch","sent","ok","Error","status","json","abrupt","t0","message","stop","_x","apply","useHttp","keyApi","apiBase","baseOffset","res","_transformCharacter","_ref2","_callee2","_args2","_context2","results","_transformAllCharacter","_ref3","_callee3","_context3","_x2","getComic","_ref4","_callee4","_context4","_transformComics","_x3","getAllComics","_ref5","_callee5","_args5","_context5","_transformgetAllComics","_comics$textObjects$","title","pageCount","path","extension","language","textObjects","price","prices","format","issueNumber","urls","pricePrint","currPath"],"sourceRoot":""}